$workdir = Convert-Path $pwd

$gituser = "l00tz1ffer"
$gitserver = "lootziffers-welt.de"
$defaultRemoteName = "origin"
$targetBranchName = "master"

$gitHubExists = 0

$workDirName = $workdir.Substring(($workdir.LastIndexOf("\") + 1), ($workdir.Length - 1 ) - $workdir.LastIndexOf("\"))

$git_dir_string = $workDirName + ".git"
echo $workDirName


git remote -v >> remotes.temp
$File = 'remotes.temp'

foreach ($line in Get-Content $File) {
    $remoteListingLine = $line
    $remoteHostName = $remoteListingLine.Substring(($remoteListingLine.IndexOf("@") + 1), ($remoteListingLine.LastIndexOf(":") - 1 ) - $remoteListingLine.IndexOf("@"))
    echo $remoteHostName
    if ($remoteHostName -contains "github.com") {
        echo "GitHub Repo found"
        $remoteListingLine = $remoteListingLine -replace $defaultRemoteName, "github"
        echo "Renaming properly ..."
        echo $remoteListingLine

        git remote rename $defaultRemoteName "github"
        $gitHubExists = 1

    }

}
Remove-Item 'remotes.temp'



if (-not (Test-Path -Path .gitignore)){
    New-Item -Path '.gitignore' -ItemType File
}


If ( $workDirName -ne "git-create-repo" -and $workDirName -ne "git-create-repo.git") {
    $File = '.gitignore'

    foreach ($line in Get-Content $File) {
        if (-not (Test-Path -Path new.gitignore)){
            New-Item -Path 'new.gitignore' -ItemType File
        }

        echo ".gitignore enthält folgenden Wert: $line" 
        if ($line -contains "git-create-repo.ps1") {
            echo "Duplicate entry found, Removing it"
        }
        elseif ($line.Length -eq 0) {
            echo "Empty Line Found in .gitignore -> Removing it"
        }
        elseif ($line -contains $null) {
            echo "Empty Line Found in .gitignore -> Removing it"
        }
        else {
            
            $line >> new.gitignore
        }
    }
    
    Remove-Item '.gitignore'
    Rename-Item 'new.gitignore' '.gitignore'

    "git-create-repo.ps1" >> .gitignore
}

git remote rm $defaultRemoteName
git branch -mv main $targetBranchName


ssh git@$gitserver "cd  $gituser && mkdir $git_dir_string && cd $git_dir_string && git init --bare"



git init
echo "Lokales Repo wurde Initialisiert"




git add .
echo "Dateien wurden zum Lokalen Repository hinzugefuegt"

$timestamp = (get-date).ToString('G')
git commit -m "Autogenerated Commit from ${[System.Environment]::UserName} -> Zeit: $timestamp"
echo "Autogenerated Commit -> Zeit: $timestamp"


$git_repo_string = "git@lootziffers-welt.de:" + $gituser + "/" + $workDirName + ".git"
echo "Der Verwendete Remote Git Repo string lautet: $git_repo_string" 

git remote add $defaultRemoteName $git_repo_string
git push $defaultRemoteName $targetBranchName
if ($gitHubExists -eq 1) {
    git push github $targetBranchName
}

 

scp git@${gitserver}:${gituser}/repos.txt repos.txt
if (-not (Test-Path -Path .gitignore)){
    New-Item -Path 'repos.txt' -ItemType File
}
$File = "repos.txt"
foreach ($line in Get-Content $File) {
    echo "repos.txt enthält folgenden Wert: $line" 
    if ($line -contains $git_repo_string) {
        echo "Duplicate entry found, Removing it"
    }
    elseif ($line.Length -eq 0) {
        echo "Empty Line Found in .gitignore -> Removing it"
    }
    elseif ($line -contains $null) {
        echo "Empty Line Found in .gitignore -> Removing it"
    }
    else {
        $line >> new.repos.txt
    }
}
Remove-Item 'repos.txt'
Rename-Item 'new.repos.txt' 'repos.txt'

${git_repo_string}.ToString() >> repos.txt
scp repos.txt git@${gitserver}:${gituser}/repos.txt
Remove-Item 'repos.txt'




Start-Sleep -Seconds 5